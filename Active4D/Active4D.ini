/*
	Active4D configuration
	
	
	PURPOSE
	-------
	This file is used to configure the runtime behavior of Active4D. It is read in at
	startup, and thereafter it is checked periodically to see if it has been modified,
	in which case the file is reloaded. This allows you to reconfigure various aspects
	of Active4D without restarting the server.
	
	
	FORMAT
	------
	Each setting is specified in the form <option> = <value>, where <option> is the
	name of the option and <value> is a format which depends on the option. The specific
	format for each option is documented below.
	
	You may use any number of spaces or tabs around the three elements, but the <option>
	and <value> must be on the same line. You may use any number of blank lines, and you
	may also use any of the comment styles available in Active4D.
	
	Case is not significant either for keys or values. If you do not specify a value for
	an option, a default value is assigned. The default value is documented with each option.
	
	Boolean values may be specified as "true/false" or "yes/no".
	

	ABOUT PATHS
	-----------
	To allow you to specify file paths in a way that is portable between different instances
	of 4D and different computer platforms, there are four path tokens you can use to represent 
	special directories:
	
		<default>		The default 4D directory (structure dir or Client application dir)
		<web>			The web root directory
		<4d volume>		The name of the volume on which the running 4D resides
		<boot volume>	The name of the system's boot volume
		
	These tokens are replaced with the relevant directory (without a trailing slash) at the time
	this file is read in. For example, to specify a path to an "includes" directory in the 4D
	default directory, you would use this:
	
		<default>/includes
		
	You may also use relative directory movement (../) to specify a directory relative to
	another known directory. For example, if you want to specify a directory at the same level
	as the web root, you could do this:
	
		<web>/../mydir
		
	PATH LISTS
	Several options allow you to enter a semicolon-delimited list of absolute directory paths 
	to search in URL (Unix) format. In these cases the paths should begin with a '/' or one of 
	the path tokens. For example,
	
		<4d volume>/Development/Active4D/libs;/CKG/Development/Libs
	
	would search in the two given directories. On Windows, a path might look like this: 
	
		/C/My Documents/Projects/Foobar
		
	which in native Windows terms would be C:\My Documents\Projects\Foobar. Path lists are 
	traversed from left to right, and paths that are not valid at the time this config file 
	is read are ignored.
	
	REMOTE VOLUMES ON MAC OS X
	On Mac OS X, if you need to reference a remote volume, DO NOT prepend the volume path with
	"/Volumes". So if you mount a remote volume called "Homer", and you want to put make a path
	to the "images" folder within it, the path would be:
	
		/Homer/images
*/


/*
	WEB ROOT PATH
	
	This option determines the default web root directory, which is the container within which
	your site files must ordinarily reside.
	
	NOTE: If you are specifying virtual hosts in VirtualHosts.ini, the web root may be overridden.
	
	The path following the hostname in a URL is relative to this path, as are absolute paths
	used in any href or src attributes in your web pages (styleheets, javascripts, images, links)
	as well as include directives. The path specified should be a full path in URL (Unix) format.
	The path must be valid at the time the config file is read.
	
	Because other options depend on the web root, make sure to set this option first.
	
	DEFAULT
	-------
	root = <default>/web
*/

root = 



/*
	LIBRARY/CONFIG FILE SEARCH PATH
	
	When Active4D searches for libraries and .ini files, it follows a search path of:
	
		<default>/Active4D
		<shared 4D directory>/Active4D
		<preferences>/Active4D
	
	In addition to the standard search path for libraries and .ini files, you may specify
	a path list with this option to search as well.
	
	Note that because this config file is opened first, before the 'lib dirs' option is set, 
	it must be in one of the three places listed above.
	
	DEFAULT
	-------
	lib dirs = 
*/

lib dirs = <default>/libs; <web>/app/helpers ; <web>/app/models



/*
	SAFE SCRIPT DIRECTORIES
	
	When Active4D is asked to serve, execute, include or require a file, the file (or the target)
	of an alias being requested) must be within the web root directory (or a subdirectory thereof) 
	or in one of the directories (or subdirectories thereof) in this path list.
	
	DEFAULT
	-------
	safe script dirs = 
*/

safe script dirs = 



/*
	SAFE DOCUMENT COMMAND DIRECTORIES
	
	When a document command is executed which takes a path, the path (or target of an alias)
	must be within the web root directory (or a subdirectory thereof) or in one of the directories 
	(or subdirectories thereof) in this path list.
	
	DEFAULT
	-------
	safe doc dirs = 
*/

safe doc dirs = <web>/../web_static



/*
	DEFAULT PAGE
	
	If a user requests a directory without a filename, a default file within that directory
	is served. This option determines the names of the files to try.
	
	You may enter several filenames separated by spaces or tabs. The filenames are tried
	from left to right.
	
	DEFAULT
	-------
	default page = default.a4d index.a4d
*/

default page = 



/*
	FUSEBOX PAGE
	
	When you are using fusebox, it is critical to ensure that all executable requests 
	(with a few exceptions) go through the main fusebox page, which does some basic setup
	and then calls the fusebox core.
	
	If you are using fusebox, you should set this option to the page name that will be
	used in your fuseaction URLs, usually index.a4d. If any other existing executable page 
	is requested, Active4D will redirect to the fusebox page.
	
	Sometimes you may want to allow special files, such as image.a4d, to be executed directly 
	without going through the fusebox machinery. In such cases you can add a whitelist
	of one or more page names after the fusebox page, separated by a vertical bar (|).
	
	For example, to allow image.a4d and foobar.a4d to be executed directly, but to force
	all other executable requests to go through index.a4d, you would use this:
	
		fusebox page = index.a4d | image.a4d 
	
	DEFAULT
	-------
	fusebox page = 
*/

fusebox page = index.a4d | image.a4d | ajax_controller.a4d



/*
	EXECUTION ERROR PAGE
	
	When an execution error occurs, Active4D attempts to execute the page specified with
	this option. If the page cannot be found or is not specified, the built in error message
	is displayed.
	
	You should specify a web root-relative path to a file.
	
	If you are using fusebox, the error page is not constricted by the "fusebox page" option.
	If you want to handle the error within the context of fusebox, the error page should contain
	this code:
	
	<% fusebox.handleError("home.error") %>
	
	The fuseaction "home.error" should be replaced with whatever fuseaction you wish to call
	for execution errors. In the error handling fuse, be sure to execute this code:
	
	<% fusebox.postHandleError %>
		
	DEFAULT
	-------
	error page = 
*/

error page = 



/*
	HTTP ERROR PAGE
	
	When an http error occurs, such as 404 Page Not Found, if the requested resource
	is not an image, javascript, stylesheet or favicon, Active4D attempts to execute the 
	page specified with this option. If the page cannot be found or is not specified, 
	Active4D looks for a page in the root directory with the name <status>.<ext>, where
	<status> is the http status code (such as 404) and <ext> is the first executable extension
	configured with the 'executable extensions' option. If that file is not found,
	the built in error message is displayed.
	
	When an http error occurs, Active4D adds two request headers:
	
	X-Error-Status - the http status code
	X-Error-URL    - the full requested URL that caused the error
	
	You should specify a web root-relative path to a file in this option.
	
	If you are using fusebox, you can specify a fuseaction to execute, for example:
	
	    http error page = index.a4d?action=home.httpError
		
	In the target fuseaction you can examine the X-Error-Status and X-Error-URL headers
	to figure out what went wrong.
	
	NOTE: The URL and query must be URL encoded UTF-8.
	
	DEFAULT
	-------
	http error page = 
*/

http error page = 



/*
	EXECUTABLE FILENAME EXTENSIONS
	
	By default Active4D will only attempt to execute files with the extension .a4d. All other
	files are considered static content and are served directly. If you want to use a different 
	executable extension, you may provide a list of file extensions with this option. The 
	extensions may be separated by any amount of whitespace. Each extension must begin with '.' 
	followed by a maximum of 5 alphanumeric characters.
	
	DEFAULT
	-------
	executable extensions = .a4d
*/

executable extensions = 



/*
	NON-EXECUTABLE SERVING POLICY
	
	When a non-executable file is requested, this option determines what Active4D does. If it is
	set to "true" or "yes", Active4D serves the requested file. If it is set to "false" or "no", 
	Active4D returns a status of A4D Not Executable (-1) and the file's path, modified date and 
	modified time in the first three elements of the response header value array. The path is in 
	native format and the date is in the default long format for the current locale. This allows 
	the web server to easily handle caching by checking the path and modification date/time.
	
	DEFAULT
	-------
	serve nonexecutables = true
*/

serve nonexecutables = 



/*
	LIBRARY FILENAME EXTENSION
	
	By default the filename extension for libraries is .a4l. If you want to use a different
	extension, you may set it with this option. The extension must begin with '.' followed by a 
	maximum of 5 alphanumeric characters.
	
	Note that if you do change this, you must rename all of the Active4D standard libraries
	with the new extension.
	
	DEFAULT
	-------
	lib extension = .a4l
*/

lib extension = 



/*
	AUTO-REFRESH LIBRARIES
	
	By default, libraries are automatically checked every so often to see if they
	have been modified, and if so they are reloaded. If you want to turn this off for some 
	reason, you can do so by setting this option to "false" or "no". In that case you must 
	manually flush and re-import libraries after modifying them.
	
	During development, you should always keep this flag on. In reality, there is little
	point in turning this option off, because the modification date checking is very fast.
	
	DEFAULT
	-------
	auto refresh libs = true
*/

auto refresh libs = 



/*
	REFRESH INTERVAL
	
	This option sets the number of seconds between checks to see if libraries and init files
	have been modified. The minimum value is 5 and the maximum value is 60.
	
	DEFAULT
	-------
	refresh interval = 5   // interpreted
	refresh interval = 60  // compiled
*/

refresh interval = 



/*
	SCRIPT TIMEOUT
	
	Active4D keeps track of the total amount of time that is spent executing a request.
	If the amount of time spent executing is greater than this option, a timeout error
	is generated. This prevents your code from getting stuck in infinite loops.
	
	The time specified with this option is the MINIMUM script timeout in seconds. 
	The actual timeout can be set higher within Active4D with the 'set script timeout' command. 
	In no case can the timeout be set lower than the value set with this option.
	
	To change the minimum timeout you must change this value.
	
	DEFAULT
	-------
	script timeout = 30  // seconds
*/

script timeout = 999



/*
	STREAM REQUEST RECEIVE TIMEOUT
	
	When using the plugin call 'A4D Execute stream request', Active4D receives the request in 
	chunks. This option controls the maximum number of ticks Active4D will wait to receive a 
	chunk. Values < 600 (10 seconds) are ignored.
	
	DEFAULT
	-------
	receive timeout = 3600  // 1 minute
*/

receive timeout = 



/*
	LOCALE
	
	When you use the %% formatting operator with numbers, dates and times, the formatting is
	not done by 4D, but by the ICU Unicode library. You will usually want the formats to match
	the standard for the locale you are in. By default ICU will use the system locale, as 4D does,
	but if for some reason you want to use a different locale, you can set it here.
	
	The value should be a valid ICU locale id. For information on locale ids, see:
	
	  http://userguide.icu-project.org/locale#TOC-Overview
	
	DEFAULT
	-------
	locale =   // use system default
*/

locale = 


/*
	PLATFORM CHARACTER SET
	
	When Active4D finds reads script, library and config files, they must be converted to Unicode,
	which is the character set used internally by Active4D. This option specifies what character set
	your script files are in.
	
	Any valid IANA character set name may be used. In addition you may use "win"
	as an alias for "windows-1252".	Note that "latin1" and "iso-8859-1" are equivalent.
	This value can be changed at runtime with the 'set output charset' command.
	
	DEFAULT
	-------
	platform charset = shift_jis  // if running on a Japanese system
	platform charset = gb2312     // if running on a Chinese system
	platform charset = mac/win    // everyone else
	
	NOTE: The default mac/win charset may change to utf-8 in the future, it is recommended
	that you convert your files to utf-8 as soon as possible. You may change the charset
	of a config file or library file individually if you put a comment on the first line
	which contains "charset=<charset>". If such a comment exists that charset will be used
	instead of the global platform charset.
*/

platform charset = utf-8



/*
	OUTPUT CHARACTER SET
	
	When writing text to the response buffer, Active4D converts from Unicode
	to the output character set. This option specifies what character set to convert to.
	This character set specified here is also communicated to the browser so it
	knows the character set of the web page.
	
	Any valid IANA character set name may be used. In addition you may use "win"
	as an alias for "windows-1252".	Note that "latin1" and "iso-8859-1" are equivalent.
	This value can be changed at runtime with the 'set output charset' command.
	
	DEFAULT
	-------
	output charset = shift_jis  // on a Japanese system
	output charset = gb2312     // on a Chinese system
	output charset = latin1     // everyone else
*/

output charset = utf-8



/*
	OUTPUT HTML ENCODING
	
	When text is written to the response buffer it is HTML encoded. You can specify the
	HTML encoding to perform by default with this option.
	
	You can specify a number of bit flags to indicate which characters to encode. More than one 
	flag can be specified by separating them by '+' and whitespace. The bit flags are:
	 	"none", "quotes", "tags", "ampersand", "extended", "html" and "all" (without the quotes).
	
	Note that "extended" and "html" are synonymous. This value can be changed at runtime with the 
	'set output encoding' command.
	
	DEFAULT
	-------
	output encoding = none  // on a Japanese/Chinese language system
	output encoding = html  // everyone else
*/

output encoding = 



/*
	MAXIMUM REQUEST SIZE
	
	Active4D enforces a maximum on the size of a request, including headers. The default maximum
	is 64K. If you are allowing users to upload files (which is just another kind of request), 
	you will most likely need to set the maximum request size with this option, not only to allow 
	larger uploads, but also to prevent uploads that are too large, since they are buffered in
	memory.

	You should set this option to something reasonable for the type of file you expect to be 
	uploaded. Values less than 32 (K) are ignored. If the request exceeds this size, the status
	413 Request Entity Too Large is returned.
	
	DEFAULT
	-------
	max request size = 64  // 64K
*/

max request size = 2048



/*
	CACHE CONTROL HTTP HEADER
	
	This option sets the default cache-control for executable files, which determines whether
	or not downstream proxies and browsers will cache the response. Since executable files are
	by nature dynamic, the default is not to cache.
	
	Values for this option should be valid directives to the cache-control HTTP header, 
	as specified in RFC 2616, section 14.9. This value can be changed at runtime with the 
	'set cache control' command.
	
	DEFAULT
	-------
	cache control = no-cache
*/

cache control = 



/*
	PAGE EXPIRATION TIME
	
	If you are allowing executable files to be cached, this number sets the number of minutes 
	before an executable file should expire on the client browser. Setting this option to zero 
	forces pages to expire immediately. Setting a negative value will cause this value to be 
	ignored by Active4D. Positive values are clipped to one year (in minutes).
	
	This value can be changed at runtime with the 'set expires' command.
	
	DEFAULT
	-------
	expires = -1  // ignore, since cache control = no-cache by default
*/

expires = 



/*
	AUTO-CREATE VARIABLES
	
	In versions of Active4D prior to 3.01, by default Active4D would create local variables 
	from query string parameters and form variables. This no longer the default as it is too
	prone to error in your code. Active4D provides a very concise syntax for accessing form 
	variables and query parameters via the _form and _query collection iterators.
	
	It is STRONGLY recommended that you leave this option off, but if you must turn it on
	to support legacy code, you may do so here. This option takes a boolean value.
	
	DEFAULT
	-------
	auto create vars = false
*/

auto create vars = 



/*
	PARAMETER MODE
	
	This option determines which collection query string parameters and form variables go into. 
	There are three possible modes:
	
	  separate       - query params and form variables are maintained in separate collections
	  query params   - form variables are put in the query params collection
	  form variables - query string params are put in the web form variables collection
	
	Why do this? Because many pages can be loaded either through a POST or a GET. In either case
	the parameters they "receive" should be the same. If you manipulate the query params or
	form variables collection, it is a pain to constantly have to check the request method 
	to figure out which collection to modify. By setting the parameter mode, you can force all
	values to go into one collection or the other. Usually you will want to do this.
	
	NOTE: If you are using fusebox, you don't have to worry about this as all form variables
	and query parameters are marshalled into the $attributes collection.
	
	DEFAULT
	-------
	parameter mode = separate
*/

parameter mode = 



/*
	CLIENT IS WEB SERVER (deprecated)
	
	This option is deprecated and is no longer used. To set Client as the web server,
	it is sufficient to do so in the shell by setting <>A4D_ClientIsWebServer.
*/

client is web server = 



/*
	LOG LEVEL
	
	This option allows you to set which kinds of events are logged to Active4D.log.
	You can specify one or more bit flags separated by "+" and any amount of whitespace.
	
	This value can be changed at runtime with the 'set log level' command.
	
	DEFAULT
	-------
	log level = 3  // A4D Log Critical Errors + A4D Log User Messages
*/

log level = 7



/*
	AUTO RELATE
	
	This option determines whether to auto-load related one/many records after FIRST RECORD, 
	LAST RECORD, NEXT RECORD, PREVIOUS RECORD, GOTO RECORD, and GOTO SELECTED RECORD. This
	option can be overridden by the 'auto relate' command and by the extra parameters to
	the aforementioned commands.
	
	DEFAULT
	-------
	auto relate one  = false
	auto relate many = false
*/

auto relate one = 
auto relate many = 



/*
	USE SESSIONS
	
	This option is a global switch for session management. If are using sessions for your 
	application, specify "true" or "yes". If you do not need session management at all, 
	specify "false" or "no".
	
	DEFAULT
	-------
	use sessions = true
*/

use sessions = 



/*
	USE SESSION COOKIES
	
	This option determines whether Active4D should store session IDs in cookies or look for 
	the session variable in form variables or query parameters.
	
	Using "true" or "yes" will turn cookies on, "false" or "no" will turn them off.
	
	DEFAULT
	-------
	use session cookies = true
*/

use session cookies = 



/*
	SESSION COOKIE NAME
	
	When using session cookies, by default Active4D stores the encrypted session id
	in a cookie named ACTIVE4D_SESSIONID. You may change the name of the cookie with this option.
	It must contain only alphanumeric characters or underscores with no spaces and must be 
	<= 255 characters.
	
	DEFAULT
	-------
	session cookie name = ACTIVE4D_SESSIONID
*/

session cookie name = 



/*
	SESSION TIMEOUT
	
	This option sets the length of time in minutes that a session can live without any user 
	interaction. By default sessions have a timeout of 10 minutes.
	
	You may set a timeout of less than 1 minute by using a fractional value. For example, 
	a value of 0.5 would be 30 seconds.
	
	The session timeout can be changed at runtime with the 'set session timeout' command.
	
	DEFAULT
	-------
	session timeout = 10  // minutes
*/

session timeout = 15



/*
	SESSION PURGE INTERVAL
	
	This option sets the minimum interval in seconds between attempts to purge expired 
	sessions. In actual fact the interval may be something greater, since Active4D waits 
	for all requests to finish before purging. Valid values are between 5 and 60 inclusive.
	
	DEFAULT
	-------
	session purge interval = 10  // seconds
*/

session purge interval = 



/*
	SESSION VARIABLE NAME
	
	If auto create vars = true, Active4D creates a local variable called $sid which contains
	the encrypted session id. You may change the name of the variable with this option. 
	The name must follow the rules for 4D local variable names.
	
	NOTE: You may retrieve the session id without this variable by using the 'session id'
	command.
	
	DEFAULT
	-------
	session var name = $sid
*/

session var name = 



/*
	SESSION COOKIE DOMAIN
	
	This option sets the default domain of the session cookie. Normally you should not need 
	to set this.
	
	DEFAULT
	-------
	session cookie domain = 
*/

session cookie domain =



/*
	SESSION COOKIE PATH
	
	This option sets the default path of the session cookie. Normally you should not need 
	to set this.
	
	DEFAULT
	-------
	session cookie path = 
*/

session cookie path =

